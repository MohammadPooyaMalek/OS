#!/bin/bash
set -f

PATH="$(cd "${0%/*}" && pwd):$PATH"

source "${0%/*}/common-functions.sh"

Usage() {
   cat <<EOF
Usage: ${0##*/} mirror_dir

    write tab delimited data for simple streams 'tab2streams' input.

    Example:

      bzr branch lp:simplestreams simplestreams
      git clone https://git.launchpad.net/pooya pooya

      ./pooya/bin/mirror-dump-sstream-data "\$mirror_d" > mdata.txt
      ./simplestreams/tools/tenv tab2streams mdata.txt pooya-streams.d

      ./simplestreams/tools/tenv env -u GNUPGHOME \
         SS_GPG_BATCH=1 SS_GPG_DEFAULT_KEY=A5DDB840  \
         js2signed pooya-streams.d
EOF
}

[ "$1" = "-h" -o "$1" = "--help" ] && { Usage; exit 0; }
[ "$#" -eq 1 ] || { Usage 1>&2; fail "must give mirror dir"; }

if [ -z "$POOYA_BZR" ]; then
    POOYA_BZR=$(t=$(readlink -f "$0") && cd "${t%/*}/.." && pwd)
elif [ -z "$POOYA_GIT" ]; then
    POOYA_GIT=$(t=$(readlink -f "$0") && cd "${t%/*}/.." && pwd)
fi

OIFS="$IFS"
declare -A VERSION2SERIAL
VERSION2SERIAL=(
    [0.3.0]="20111020" [0.3.1]="20130207"
    [0.3.1~pre1]="20120611" [0.3.1~pre3]="20120827"
    [0.3.1~pre4]="20130111" [0.3.2~pre1]="20130513"
    [0.3.2~pre2]="20131218" [0.3.2~pre3]="20140315"
    [0.3.2]="20140317"
)

generate_lxd() {
    local gzpath="$1"
    local xzpath="${gzpath%-lxc.tar.gz}-lxc.tar.xz"
    local lxdpath="${gzpath%-lxc.tar.gz}-lxd.tar.xz"
    if [ ! -f "$xzpath" ]; then
        error "creating $xzpath from $gzpath"
        zcat "$gzpath" | xz > "$xzpath.tmp" &&
            mv "$xzpath.tmp" "$xzpath" ||
            { error "failed to create $xzpath"; return 1; }
    fi
    if [ ! -f "$lxdpath" ]; then
        error "creating lxd meta in $lxdpath"
        data_from_path "$lxdpath"
        LXD_META=$LXD_META generate-lxd-meta \
            "$lxdpath" "${D_arch}" "${D_version}" "${D_serial}" ||
            { error "failed to create $lxdpath"; return 1; }
    fi
    return 0
}

data_from_path() {
    # populate D_<name> for information about path.
    local path="$1"
    local version="" fname="" serial="" baseproduct="" arch="" ftype="" item=""
    local extra="" vmaj="" vmin="" vmic="" stream=""
    local product_name="" content_id="" pubname=""
    local rdns="net.pooya-cloud"
    local _version="" tmnp=""
    fname=${path##*/}

    # tokenize pooya-0.3.1~pre4-x86_64-lxc.tar.gz, baseproduct gets 'pooya'
    IFS="-"; set -- $fname; IFS="$OIFS"
    baseproduct="$1"; version="$2"; arch="$3"; item="$4"
    case "$item" in
        # lxc.tar.gz -> root.tar.xz
        lxc.tar.xz|lxc.tar.gz) ftype="root.${item#lxc.}";;
        *) ftype="$item";;
    esac

    serial="${VERSION2SERIAL[$version]}"
    if [ -z "$serial" ]; then
        datefortag "$version" ||
            fail "serial not found for $version!"
        serial="$_RET"
        VERSION2SERIAL[$version]="$serial"
    fi

    # tokenize 0.3.1~pre1 or 0.3.0
    extra=${version#*~}; [ "$extra" = "$version" ] && extra=""
    tmp=${version%$extra}
    IFS="."; set -- ${version%$extra}; IFS="$OIFS"
    vmaj="$1"; vmin="$2"; vmic="$3"

    [ -z "$extra" ] && stream="released" || stream="devel"

    # productname is "net.pooya-cloud[.devel]:standard:0.3:arch"
    rdns="net.pooya-cloud"
    [ "$stream" = "released" ] || rdns="${rdns}.${stream}"
    product_name="$rdns:standard:$vmaj.$vmin:$arch"
    content_id="${CONTENT_ID_BASE//%(stream)s/${stream}}"
    pubname="${baseproduct}-${version}-${arch}"

    local os="$baseproduct" release_title="$vmaj.$vmin" aliases=""
    if [ "$stream" = "released" ]; then
        aliases="$vmaj.$vmin"
    else
        aliases="$vmaj.$vmin-$stream"
    fi

    local label="$stream"
    local vname="" pre="D_"
    for vname in content_id product_name serial ftype item path arch \
        version pubname stream os release_title label aliases; do
        eval ${pre}${vname}='${!vname}' || return
    done
    return 0
}

output_for_path() {
    local ent="$1"
    local path=${1#./}
    local size="" md5="" sha256="" pubname=""
    case "$path" in
        *-uec.tar.gz|*-disk.img|*-rootfs.img|*-lxc.tar.gz|*-lxc.tar.xz) :;;
        *-lxd.tar.xz) :;;
        *) return;;
    esac
    data_from_path "$path" || return
    size=$(stat --format="%s" "$path") || return
    md5=$(md5sum "${path}") && md5="${md5%%  ${path}}" || return
    sha256=$(sha256sum "${path}") && sha256="${sha256%%  ${path}}" || return

    local req_out="" dname="" item=""
    local rfields="content_id product_name serial item"
    for item in $rfields; do
        dname="D_${item}"
        req_out="${req_out}${TAB}${!dname}"
    done
    req_out=${req_out#${TAB}}

    local fields="ftype path arch version size sha256 md5 pubname stream"
    local fields="${fields} os release_title label aliases"
    local out="" sha="" exdata=""
    local D_size="${size}" D_md5="${md5}" D_sha256="${sha256}"
    for i in $fields; do
        dname="D_${i}"
        out="${out}${TAB}${i}=${!dname}"
    done
    out=${out#${TAB}}

    case "$path" in
        *-lxd.tar.xz)
            xzpath=${path%-lxd.tar.xz}-lxc.tar.xz
            [ -f "$xzpath" ] || {
                error "no $xzpath for lxd $path";
                return 1;
            }
            sha=$(cat "$xzpath" "$path" | sha256sum) &&
                sha="${sha%%  -}" &&
                exdata="${exdata}${TAB}combined_rootxz_sha256=$sha" || {
                    error "failed create combined sha for lxd '$path'";
                    exit 1;
                }
            ;;
    esac
    if [ -n "$exdata" ]; then
        out="${out}${TAB}${exdata#${TAB}}"
    fi
    printf "%s\n" "${req_out}${TAB}${out}"
}

#content-id product_name version_name img_name [key=value [key=value]]
CONTENT_ID_BASE="net.pooya-cloud:%(stream)s:download"

TAB="$(printf '\t')"

top_d="${1:-.}"
cd "$top_d"

IFS=$'\n'; files=( $(find . -type f -name "*-lxc.tar.gz") ); IFS="$OIFS"
for lxc_tar_gz in "${files[@]}"; do
    generate_lxd "${lxc_tar_gz}" || fail "failed generate_lxd for $lxc_tar_gz"
done

IFS=$'\n'; files=( $(find . -type f -printf "%p\n") ); IFS="$OIFS"

for ent in "${files[@]}"; do
    path=${ent#./}
    output_for_path "$path" "$size" || exit
done

# vi: tabstop=4 expandtab
